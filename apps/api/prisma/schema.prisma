generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/@prisma/generated-client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("_")
}

// Assignments

enum AssignmentStatus {
  CANCELED
  COMPLETE
  EXPIRED
  OUTSTANDING
}

type EncryptionKeyPair {
  publicKey  Bytes
  privateKey Bytes
}

model AssignmentModel {
  createdAt         DateTime               @default(now()) @db.Date
  updatedAt         DateTime               @updatedAt @db.Date
  id                String                 @id @map("_id")
  completedAt       DateTime?
  expiresAt         DateTime
  group             GroupModel?            @relation(fields: [groupId], references: [id])
  groupId           String?                @db.ObjectId
  instrument        InstrumentModel        @relation(fields: [instrumentId], references: [id])
  instrumentId      String
  instrumentRecord  InstrumentRecordModel?
  status            AssignmentStatus
  subject           SubjectModel           @relation(fields: [subjectId], references: [id])
  subjectId         String
  url               String
  encryptionKeyPair EncryptionKeyPair
}

// Groups

enum GroupType {
  CLINICAL
  RESEARCH
}

enum SubjectIdentificationMethod {
  CUSTOM_ID
  PERSONAL_INFO
}

type GroupSettings {
  defaultIdentificationMethod SubjectIdentificationMethod
}

model GroupModel {
  createdAt               DateTime                @default(now()) @db.Date
  updatedAt               DateTime                @updatedAt @db.Date
  id                      String                  @id @default(auto()) @map("_id") @db.ObjectId
  accessibleInstrumentIds String[]
  accessibleInstruments   InstrumentModel[]       @relation(fields: [accessibleInstrumentIds], references: [id])
  assignments             AssignmentModel[]
  instrumentRecords       InstrumentRecordModel[]
  name                    String                  @unique
  settings                GroupSettings
  sessions                SessionModel[]
  subjects                SubjectModel[]          @relation(fields: [subjectIds], references: [id])
  subjectIds              String[]
  type                    GroupType
  userIds                 String[]                @db.ObjectId
  users                   UserModel[]             @relation(fields: [userIds], references: [id])
}

/// Instrument Records

model InstrumentRecordModel {
  createdAt        DateTime         @default(now()) @db.Date
  updatedAt        DateTime         @updatedAt @db.Date
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  /// [ComputedMeasures]
  computedMeasures Json?
  data             Json?
  date             DateTime         @db.Date
  group            GroupModel?      @relation(fields: [groupId], references: [id])
  groupId          String?          @db.ObjectId
  subject          SubjectModel     @relation(fields: [subjectId], references: [id])
  subjectId        String
  instrument       InstrumentModel  @relation(fields: [instrumentId], references: [id])
  instrumentId     String
  assignment       AssignmentModel? @relation(fields: [assignmentId], references: [id])
  assignmentId     String?          @unique
  session          SessionModel     @relation(fields: [sessionId], references: [id])
  sessionId        String           @db.ObjectId
}

// Instruments 

enum InstrumentKind {
  FORM
  INTERACTIVE
  SERIES
}

type InstrumentInternal {
  name    String
  edition Float
}

model InstrumentModel {
  createdAt   DateTime                @default(now()) @db.Date
  updatedAt   DateTime                @updatedAt @db.Date
  id          String                  @id @map("_id")
  assignments AssignmentModel[]
  bundle      String
  groups      GroupModel[]            @relation(fields: [groupIds], references: [id])
  groupIds    String[]                @db.ObjectId
  records     InstrumentRecordModel[]
}

// Subjects

enum Sex {
  MALE
  FEMALE
}

model SubjectModel {
  createdAt         DateTime                @default(now()) @db.Date
  updatedAt         DateTime                @updatedAt @db.Date
  id                String                  @id @map("_id")
  dateOfBirth       DateTime?               @db.Date
  firstName         String?
  groupIds          String[]                @db.ObjectId
  groups            GroupModel[]            @relation(fields: [groupIds], references: [id])
  lastName          String?
  sessions          SessionModel[]
  sex               Sex?
  instrumentRecords InstrumentRecordModel[]
  assignments       AssignmentModel[]
}

enum BasePermissionLevel {
  ADMIN
  GROUP_MANAGER
  STANDARD
}

model UserModel {
  createdAt           DateTime             @default(now()) @db.Date
  updatedAt           DateTime             @updatedAt @db.Date
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  basePermissionLevel BasePermissionLevel?
  firstName           String
  groupIds            String[]             @db.ObjectId
  groups              GroupModel[]         @relation(fields: [groupIds], references: [id])
  lastName            String
  password            String
  username            String
  email               String
}

enum SessionType {
  RETROSPECTIVE
  IN_PERSON
  REMOTE
}

model SessionModel {
  createdAt         DateTime                @default(now()) @db.Date
  updatedAt         DateTime                @updatedAt @db.Date
  id                String                  @id @default(auto()) @map("_id") @db.ObjectId
  date              DateTime                @db.Date
  group             GroupModel?             @relation(fields: [groupId], references: [id])
  groupId           String?                 @db.ObjectId
  instrumentRecords InstrumentRecordModel[]
  subject           SubjectModel            @relation(fields: [subjectId], references: [id])
  subjectId         String
  type              SessionType
}

// Setup

model SetupStateModel {
  createdAt DateTime @default(now()) @db.Date
  updatedAt DateTime @updatedAt @db.Date
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  isDemo    Boolean
  isSetup   Boolean
}
