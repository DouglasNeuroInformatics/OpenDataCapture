generator client {
  provider      = "prisma-client-js"
  // output        = "../node_modules/@prisma/generated-client"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("_")
}

// Assignments

enum AssignmentStatus {
  CANCELED
  COMPLETE
  EXPIRED
  OUTSTANDING
}

type EncryptionKeyPair {
  publicKey  Bytes
  privateKey Bytes
}

model Assignment {
  createdAt         DateTime          @default(now()) @db.Date
  updatedAt         DateTime          @updatedAt @db.Date
  id                String            @id @map("_id")
  completedAt       DateTime?
  expiresAt         DateTime
  group             Group?            @relation(fields: [groupId], references: [id])
  groupId           String?           @db.ObjectId
  instrument        Instrument        @relation(fields: [instrumentId], references: [id])
  instrumentId      String
  instrumentRecord  InstrumentRecord?
  status            AssignmentStatus
  subject           Subject           @relation(fields: [subjectId], references: [id])
  subjectId         String
  url               String
  encryptionKeyPair EncryptionKeyPair

  @@map("AssignmentModel")
}

// Groups

enum GroupType {
  CLINICAL
  RESEARCH
}

enum SubjectIdentificationMethod {
  CUSTOM_ID
  PERSONAL_INFO
}

type ErrorMessage {
  en String?
  fr String?
}

type GroupSettings {
  defaultIdentificationMethod   SubjectIdentificationMethod
  idValidationRegex             String?
  idValidationRegexErrorMessage ErrorMessage?
  subjectIdDisplayLength        Int?  
}

model Group {
  createdAt               DateTime           @default(now()) @db.Date
  updatedAt               DateTime           @updatedAt @db.Date
  id                      String             @id @default(auto()) @map("_id") @db.ObjectId
  accessibleInstrumentIds String[]
  accessibleInstruments   Instrument[]       @relation(fields: [accessibleInstrumentIds], references: [id])
  assignments             Assignment[]
  instrumentRecords       InstrumentRecord[]
  name                    String             @unique
  settings                GroupSettings
  sessions                Session[]
  subjects                Subject[]          @relation(fields: [subjectIds], references: [id])
  subjectIds              String[]           
  type                    GroupType
  userIds                 String[]           @db.ObjectId
  users                   User[]             @relation(fields: [userIds], references: [id])

  @@map("GroupModel")
}

/// Instrument Records

model InstrumentRecord {
  createdAt        DateTime    @default(now()) @db.Date
  updatedAt        DateTime    @updatedAt @db.Date
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  /// [ComputedMeasures]
  computedMeasures Json?
  data             Json?
  date             DateTime    @db.Date
  group            Group?      @relation(fields: [groupId], references: [id])
  groupId          String?     @db.ObjectId
  subject          Subject     @relation(fields: [subjectId], references: [id])
  subjectId        String
  instrument       Instrument  @relation(fields: [instrumentId], references: [id])
  instrumentId     String
  assignment       Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId     String?     @unique
  session          Session     @relation(fields: [sessionId], references: [id])
  sessionId        String      @db.ObjectId

  @@map("InstrumentRecordModel")
}

// Instruments 

enum InstrumentKind {
  FORM
  INTERACTIVE
  SERIES
}

type InstrumentInternal {
  name    String
  edition Float
}

model Instrument {
  createdAt   DateTime           @default(now()) @db.Date
  updatedAt   DateTime           @updatedAt @db.Date
  id          String             @id @map("_id")
  assignments Assignment[]
  bundle      String
  groups      Group[]            @relation(fields: [groupIds], references: [id])
  groupIds    String[]           @db.ObjectId
  records     InstrumentRecord[]

  @@map("InstrumentModel")
}

// Subjects

enum Sex {
  MALE
  FEMALE
}

model Subject {
  createdAt         DateTime           @default(now()) @db.Date
  updatedAt         DateTime           @updatedAt @db.Date
  id                String             @id @map("_id")
  dateOfBirth       DateTime?          @db.Date
  firstName         String?
  groupIds          String[]           @db.ObjectId
  groups            Group[]            @relation(fields: [groupIds], references: [id])
  lastName          String?
  sessions          Session[]
  sex               Sex?
  instrumentRecords InstrumentRecord[]
  assignments       Assignment[]

  @@map("SubjectModel")
}

enum BasePermissionLevel {
  ADMIN
  GROUP_MANAGER
  STANDARD
}

enum AppSubject {
  all
  Assignment
  Group
  Instrument
  InstrumentRecord
  Session
  Subject
  User
}

enum AppAction {
  create
  delete
  manage
  read
  update
}

type AuthRule {
  action  AppAction
  subject AppSubject
}

model User {
  createdAt             DateTime             @default(now()) @db.Date
  updatedAt             DateTime             @updatedAt @db.Date
  id                    String               @id @default(auto()) @map("_id") @db.ObjectId
  basePermissionLevel   BasePermissionLevel?
  additionalPermissions AuthRule[]
  firstName             String
  groupIds              String[]             @db.ObjectId
  groups                Group[]              @relation(fields: [groupIds], references: [id])
  lastName              String
  hashedPassword        String               @map("password")
  username              String
  sex                   Sex?
  dateOfBirth           DateTime?            @db.Date

  @@map("UserModel")
}

enum SessionType {
  RETROSPECTIVE
  IN_PERSON
  REMOTE
}

model Session {
  createdAt         DateTime           @default(now()) @db.Date
  updatedAt         DateTime           @updatedAt @db.Date
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  date              DateTime           @db.Date
  group             Group?             @relation(fields: [groupId], references: [id])
  groupId           String?            @db.ObjectId
  instrumentRecords InstrumentRecord[]
  subject           Subject?           @relation(fields: [subjectId], references: [id])
  subjectId         String
  type              SessionType

  @@map("SessionModel")
}

// Setup

model SetupState {
  createdAt                     DateTime @default(now()) @db.Date
  updatedAt                     DateTime @updatedAt @db.Date
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  isDemo                        Boolean
  isExperimentalFeaturesEnabled Boolean?
  isSetup                       Boolean

  @@map("SetupStateModel")
}
